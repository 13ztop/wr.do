name: Auto Sync from oiov/wr.do

on:
  schedule:
    - cron: '0 0 * * *'  # 每天UTC时间0点（北京时间8点）自动同步
  workflow_dispatch:      # 允许手动触发

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      # 获取目标仓库的默认分支
      - name: Detect default branch
        id: branch_detector
        run: |
          DEFAULT_BRANCH=$(curl -s -H "Authorization: token ${{ secrets.SYNC_TOKEN }}" \
          "https://api.github.com/repos/13ztop/wr.do" | jq -r .default_branch)
          echo "Detected default branch: $DEFAULT_BRANCH"
          echo "DEFAULT_BRANCH=$DEFAULT_BRANCH" >> $GITHUB_ENV

      # 检出目标仓库（您的仓库）
      - name: Checkout target repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.SYNC_TOKEN }}
          repository: 13ztop/wr.do
          path: target-repo
          ref: ${{ env.DEFAULT_BRANCH }}
          fetch-depth: 0

      # 克隆源仓库（公共仓库）
      - name: Clone source repo
        run: |
          git clone --depth 1 https://github.com/oiov/wr.do.git source-repo
          echo "源仓库 oiov/wr.do 克隆完成"

      # 创建备份目录
      - name: Create backup directory
        run: mkdir -p /tmp/repo-backup

      # 识别需要保留的文件
      - name: Identify protected files
        id: find_protected
        run: |
          # 需要保留的核心文件列表
          protected_files=(
            "README.md"
            "LICENSE"
            ".github/workflows/*"  # 整个工作流目录
            "config.json"          # 配置文件
            "custom-scripts/*"     # 自定义脚本目录
          )
          
          # 创建保留文件列表
          mkdir -p /tmp/repo-backup
          for pattern in "${protected_files[@]}"; do
            find target-repo -path "*/$pattern" -print >> /tmp/repo-backup/protected-files.txt 2>/dev/null || true
          done
          
          # 添加特殊处理（处理带点的仓库名）
          echo "target-repo/.gitignore" >> /tmp/repo-backup/protected-files.txt
          
          # 保存文件数量
          if [ -f /tmp/repo-backup/protected-files.txt ]; then
            protected_count=$(sort -u /tmp/repo-backup/protected-files.txt | wc -l)
            echo "protected_files_count=$protected_count" >> $GITHUB_OUTPUT
          else
            echo "protected_files_count=0" >> $GITHUB_OUTPUT
          fi
          
          echo "保护文件识别完成"

      # 备份需要保留的文件
      - name: Backup protected content
        run: |
          mkdir -p /tmp/repo-backup/protected-files
          
          if [ -f /tmp/repo-backup/protected-files.txt ]; then
            while read file; do
              if [ -f "$file" ] || [ -d "$file" ]; then
                relative_path=${file#target-repo/}
                mkdir -p "/tmp/repo-backup/protected-files/$(dirname "$relative_path")"
                cp -r "$file" "/tmp/repo-backup/protected-files/$relative_path"
              fi
            done < <(sort -u /tmp/repo-backup/protected-files.txt)
          fi
          
          echo "保护文件备份完成"

      # 获取源仓库版本信息
      - name: Get source repository version
        id: source_version
        run: |
          cd source-repo
          echo "commit_hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "full_hash=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          echo "commit_date=$(git log -1 --format=%cd --date=format:'%Y-%m-%d')" >> $GITHUB_OUTPUT

      # 获取目标仓库版本信息
      - name: Get target repository commit
        id: target_version
        run: |
          cd target-repo
          echo "TARGET_COMMIT=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "TARGET_BRANCH=${{ env.DEFAULT_BRANCH }}" >> $GITHUB_ENV

      # 执行同步操作
      - name: Sync repositories
        run: |
          # 使用rsync同步，排除.git目录和备份文件
          rsync -av --delete \
            --exclude=.git \
            --exclude-from=/tmp/repo-backup/protected-files.txt \
            source-repo/ target-repo/
          
          echo "源仓库内容同步完成"

      # 恢复保护文件
      - name: Restore protected content
        run: |
          if [ -d /tmp/repo-backup/protected-files ]; then
            cd /tmp/repo-backup/protected-files
            find . -type f | while read file; do
              mkdir -p "$GITHUB_WORKSPACE/target-repo/$(dirname "$file")"
              cp "$file" "$GITHUB_WORKSPACE/target-repo/$file"
            done
          fi
          
          echo "保护文件恢复完成"

      # 提交和推送变更
      - name: Commit and push changes
        id: commit_push
        run: |
          cd target-repo
          git config user.name "GitHub Actions Sync"
          git config user.email "actions@github.com"
          git add -A
          
          # 检查是否有变更
          if git diff-index --quiet HEAD --; then
            echo "no_changes=true" >> $GITHUB_OUTPUT
            echo "no_changes_detected=true" >> $GITHUB_OUTPUT
            echo "没有需要提交的变更"
          else
            # 计算变更文件数量
            changes_count=$(git diff --name-only HEAD | wc -l)
            echo "changes_count=$changes_count" >> $GITHUB_OUTPUT
            
            # 生成提交信息
            commit_msg="自动同步: 来自 oiov/wr.do@${{ steps.source_version.outputs.commit_hash }}"
            commit_msg+="\n\n更新 $changes_count 个文件"
            if [ ${{ steps.find_protected.outputs.protected_files_count }} -gt 0 ]; then
              commit_msg+=", 保留 ${{ steps.find_protected.outputs.protected_files_count }} 个保护文件"
            fi
            
            git commit -m "$commit_msg"
            git push origin HEAD:${{ env.DEFAULT_BRANCH }}
            echo "commit_msg=$commit_msg" >> $GITHUB_OUTPUT
            echo "变更已成功推送"
          fi

      # 清理临时文件
      - name: Cleanup
        run: |
          rm -rf source-repo
          rm -rf /tmp/repo-backup

      # 设置时区（上海时间）
      - name: Set Shanghai time
        id: set_time
        run: |
          CURRENT_TIME=$(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M %Z')
          CURRENT_TIME_SHORT=$(TZ='Asia/Shanghai' date +'%H:%M %Z')
          echo "CURRENT_TIME=$CURRENT_TIME" >> $GITHUB_ENV
          echo "CURRENT_TIME_SHORT=$CURRENT_TIME_SHORT" >> $GITHUB_ENV

      # 同步成功通知
      - name: Notify Telegram on Sync Success
        if: success() && steps.commit_push.outputs.commit_msg
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            🔄 *wr.do 同步报告 | ${{ steps.source_version.outputs.commit_date }} (${{ env.CURRENT_TIME_SHORT }})*
            ━━━━━━━━━━━━━━━━━━━━━━━━
            📦 **源仓库**: [oiov/wr.do@${{ steps.source_version.outputs.commit_hash }}](https://github.com/oiov/wr.do/commit/${{ steps.source_version.outputs.full_hash }})
            🏠 **目标仓库**: [13ztop/wr.do@${{ env.TARGET_COMMIT }} (${{ env.TARGET_BRANCH }})](https://github.com/13ztop/wr.do/tree/${{ env.TARGET_BRANCH }})
            ━━━━━━━━━━━━━━━━━━━━━━━━
            • **变更文件**: ${{ steps.commit_push.outputs.changes_count }} 个
            • **保留文件**: ${{ steps.find_protected.outputs.protected_files_count }} 个
            • **同步时间**: ${{ env.CURRENT_TIME }}
            ━━━━━━━━━━━━━━━━━━━━━━━━
            ✅ 同步成功! 仓库已更新
            [查看提交详情](https://github.com/13ztop/wr.do/commit/${{ github.sha }})
          parse_mode: markdown

      # 无变更通知
      - name: Notify Telegram on No Changes
        if: success() && steps.commit_push.outputs.no_changes_detected
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            ℹ️ *wr.do 同步报告 | ${{ steps.source_version.outputs.commit_date }} (${{ env.CURRENT_TIME_SHORT }})*
            ━━━━━━━━━━━━━━━━━━━━━━━━
            📦 **源仓库**: [oiov/wr.do@${{ steps.source_version.outputs.commit_hash }}](https://github.com/oiov/wr.do)
            🏠 **目标仓库**: [13ztop/wr.do@${{ env.TARGET_COMMIT }}](https://github.com/13ztop/wr.do)
            ━━━━━━━━━━━━━━━━━━━━━━━━
            • **保留文件**: ${{ steps.find_protected.outputs.protected_files_count }} 个
            • **同步状态**: 内容一致，无需更新
            • **检测时间**: ${{ env.CURRENT_TIME }}
            ━━━━━━━━━━━━━━━━━━━━━━━━
            ✅ 仓库已是最新状态
            [查看仓库](https://github.com/13ztop/wr.do)
          parse_mode: markdown

      # 同步失败通知
      - name: Notify Telegram on Failure
        if: failure()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            ‼️ *wr.do 同步失败 | ${{ env.CURRENT_TIME_SHORT }}*
            ━━━━━━━━━━━━━━━━━━━━━━━━
            🔧 **工作流**: [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            ⏰ **发生时间**: ${{ env.CURRENT_TIME }}
            ━━━━━━━━━━━━━━━━━━━━━━━━
            🚨 同步过程遇到错误，请检查日志!
            [查看错误详情](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          parse_mode: markdown
